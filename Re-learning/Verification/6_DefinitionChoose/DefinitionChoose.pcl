# PCL program

array <int> ids[0];      #ids
array <int> types[0];    #types
array <string> variants[16][4]; #variants
array <string> phrases[0];
array <string> temp[4];
array <int> variants_randomizer[3];
array <string> words[0];
array <int> word_ids[0];
array <int> word_relations[0];
array <int> block_relations[0];
array <int> trialsN[0];
array <int> relearning_type_id[0];
array <int> blockid_for_relearning[0];
int stimulation = 1;#SHOULD BE CHANGED!!!
string info;             # Accumulate information about trials
string tab = "	";        #tab
string new_string = "\n";#new string 
string filename2 = logfile.subject() + "_additional" + ".log"; #output file name
# read scentences
input_file f = new input_file;
#reading the instruction file
f.open( "instruction.txt" );
string instructions="";
loop until
   f.end_of_file() 
begin
instructions=instructions+f.get_string()+" ";
end;
f.close();
# end reading instruction;

sub string getWordForBlockByWordId(int word_id)
begin
	string finded_word = "";

	int counter = 1;
	loop until counter>word_ids.count() || word_ids[counter]==word_id 
	begin
		counter=counter+1;
	end;
	finded_word = words[counter];
	return finded_word;
end;

sub int getRetrainingTypeByBlockId(int blockId)
begin
	int counter=1;
	loop until counter>blockid_for_relearning.count()
	begin
		if(blockid_for_relearning[counter]==blockId) then
			return relearning_type_id[counter];
		end;
		counter=counter+1;
	end;
	return 0;
end;

# showing words
sub showingWord(int id) 
begin
	int counter=1;
	loop until counter>block_relations.count() || block_relations[counter]==types[id] 
	begin
		counter=counter+1;
	end;
	int word_id = word_relations[counter];
	string finded_word = getWordForBlockByWordId(word_id);
	string txt = finded_word;
	variants_randomizer.shuffle();
	int retraining_type = getRetrainingTypeByBlockId(types[id]);
	term.print_line(id);
	term.print_line(word_id);
	term.print_line(types[id]);
	term.print_line(finded_word);
	txt.append(new_string);
	txt.append("1. ");
	txt.append(variants[id][variants_randomizer[1]]); txt.append(new_string);
	txt.append("2. ");
	txt.append(variants[id][variants_randomizer[2]]); txt.append(new_string);
	txt.append("3. ");
	txt.append(variants[id][variants_randomizer[3]]); txt.append(new_string);
	txt.append("4. ");
	txt.append(variants[id][4]); txt.append(new_string);
   word.set_caption(txt);
		 word.redraw();
		word_st.set_port_code(types[id]);
	    word_trial.present();

	   #RT
	    stimulus_data last = stimulus_manager.last_stimulus_data();
		 int reaction_time =  last.reaction_time();
		term.print_line("RT: "+string(reaction_time));
		term.print_line("button: "+string(last.button()));
		term.print_line("retraining_type: "+string(retraining_type));
		bool verno = false;
		if(last.button() != 4) then
			if(variants_randomizer[last.button()]==1) then
				verno = true;
			end;
		end;
		int block_type = 1;
		if(types[id] > 8) then
			block_type = 2;
		end;
		term.print_line(string(verno));
		info.append(string(word_id)+tab+string(verno)+tab+string(reaction_time) + tab + string(last.button())+tab+finded_word+tab+string(types[id])+tab+string(block_type)+tab+string(stimulation)+tab+string(retraining_type)+new_string );
		#end RT	
	end;
# end showing words

variants_randomizer[1] = 1;
variants_randomizer[2] = 2;
variants_randomizer[3] = 3;
#reading the phrases file
f.open( "definitions choose.txt" );
f.set_delimiter( '\n' );
int count = 1;
loop until
   f.end_of_file() 
begin
   if f.end_of_file() then break;
   end;
   trialsN.add(count);
	types.add(f.get_int());
	phrases.add(f.get_line());
	count=count+1;	
end;
f.close();

term.print_line(phrases);

int counter = 1;
loop until counter>phrases.count()
begin
	trialsN.shuffle();
	variants[counter][1] = phrases[counter];
	int k = 1;
	int j = 2;
	loop until k > j
	begin
		if(trialsN[k] == counter) then
			j = j + 1;
		else
			variants[counter][k-j+3] = phrases[trialsN[k]];
		end;
		k = k + 1;
	end;
	variants[counter][4] = "Ничего из вышеперечисленного";
	counter=counter+1;
end;

#reading the words file
f.open( "words.txt" );
f.set_delimiter( '\t' );
loop until
   f.end_of_file() 
begin
   if f.end_of_file() then break;
   end;
	words.add(f.get_string());
	word_ids.add(f.get_int());
end;
f.close();
term.print_line(words);
term.print_line(word_ids);

f.open( "Generated.txt" );
f.set_delimiter( '\t' );
loop until
   f.end_of_file() 
begin
   if f.end_of_file() then break;
   end;
	word_relations.add(f.get_int());
	block_relations.add(f.get_int());	
end;
f.close();
term.print_line(word_relations);
term.print_line(block_relations);

f.open( "Relearning_type_block_relation.txt" );
f.set_delimiter( '\t' );
loop until
   f.end_of_file() 
begin
   if f.end_of_file() then break;
   end;
	relearning_type_id.add(f.get_int());
   blockid_for_relearning.add(f.get_int());	
end;
f.close();

#showing the instruction

instruction.set_caption(instructions);
instruction.set_max_text_width(1000);
instruction.redraw();
instruction_trial.present();
# end showing instruction
#shuffling array
trialsN.shuffle();
#showing word
loop int i=1;
until i>trialsN.count() #|| i>5
begin
		
       showingWord(trialsN[i]);
	    
	   
	i=i+1;
end;
#end showing word
# recording info to the output file
output_file file = new output_file;
file.open(filename2, true);
string information = "NAME: " + tab + logfile.subject() + new_string;
information.append("id"+tab+"bool"+tab+"RT"+tab+"button"+tab+"word"+tab+"sem"+tab+"abs"+tab+"stim"+tab+"retraining_type"+new_string);
information.append(info);
file.print(information);
file.close();